{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Pratibha Hotwani\\\\Desktop\\\\Master\\\\User-Interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: \"AIzaSyCFOyx3wqawq7GzsEvDBHqbIa-T3QP53o0\",\n  authDomain: \"reandfi.firebaseapp.com\",\n  databaseURL: \"https://reandfi.firebaseio.com\",\n  projectId: \"reandfi\",\n  storageBucket: \"\",\n  messagingSenderId: \"164929870164\",\n  appId: \"1:164929870164:web:afb2660bb1265970\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: 'http://localhost:3000/home'\n    });\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.database();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["C:\\Users\\Pratibha Hotwani\\Desktop\\Master\\User-Interface\\src\\components\\Firebase\\firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","doSendEmailVerification","sendEmailVerification","url","db","ref","users","initializeApp","database"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,yBAFD;AAGXC,EAAAA,WAAW,EAAE,gCAHF;AAIXC,EAAAA,SAAS,EAAE,SAJA;AAKXC,EAAAA,aAAa,EAAE,EALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;;AASE,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SASdC,gCATc,GASqB,CAACC,KAAD,EAAQC,QAAR,KACjC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CAVY;;AAAA,SAYdG,4BAZc,GAYiB,CAACJ,KAAD,EAAQC,QAAR,KAC7B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAbY;;AAAA,SAedK,SAfc,GAeF,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAfJ;;AAAA,SAiBdC,eAjBc,GAiBIR,KAAK,IAAI,KAAKE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CAjBb;;AAAA,SAmBdU,gBAnBc,GAmBKT,QAAQ,IACzB,KAAKC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CApBY;;AAAA,SAwBdY,kBAxBc,GAwBO,CAACC,IAAD,EAAOC,QAAP,KACnB,KAAKb,IAAL,CAAUc,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,aAAKC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACGC,IADH,CACQ,OADR,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADgB,CAGhB;;AACA,cAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,YAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,WANe,CAQhB;;;AACAR,UAAAA,QAAQ;AACNE,YAAAA,GAAG,EAAEF,QAAQ,CAACE,GADR;AAENnB,YAAAA,KAAK,EAAEiB,QAAQ,CAACjB,KAFV;AAGN0B,YAAAA,aAAa,EAAET,QAAQ,CAACS,aAHlB;AAINC,YAAAA,YAAY,EAAEV,QAAQ,CAACU;AAJjB,aAKHJ,MALG,CAAR;AAQAT,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SApBH;AAqBD,OAtBD,MAsBO;AACLF,QAAAA,QAAQ;AACT;AACF,KA1BD,CAzBY;;AAAA,SAoDZa,uBApDY,GAoDY,MACxB,KAAK1B,IAAL,CAAUS,WAAV,CAAsBkB,qBAAtB,CAA4C;AAC1CC,MAAAA,GAAG,EAAC;AADsC,KAA5C,CArDY;;AAAA,SA2DdZ,IA3Dc,GA2DPC,GAAG,IAAI,KAAKY,EAAL,CAAQC,GAAR,iBAAqBb,GAArB,EA3DA;;AAAA,SA6Ddc,KA7Dc,GA6DN,MAAM,KAAKF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CA7DA;;AACZ5C,IAAAA,GAAG,CAAC8C,aAAJ,CAAkB7C,MAAlB;AAEA,SAAKa,IAAL,GAAYd,GAAG,CAACc,IAAJ,EAAZ;AACA,SAAK6B,EAAL,GAAU3C,GAAG,CAAC+C,QAAJ,EAAV;AACD,GANY,CAQb;;;AARa;;AAiEf,eAAetC,QAAf","sourcesContent":["import app from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCFOyx3wqawq7GzsEvDBHqbIa-T3QP53o0\",\r\n    authDomain: \"reandfi.firebaseapp.com\",\r\n    databaseURL: \"https://reandfi.firebaseio.com\",\r\n    projectId: \"reandfi\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"164929870164\",\r\n    appId: \"1:164929870164:web:afb2660bb1265970\"\r\n  };\r\n  class Firebase {\r\n    constructor() {\r\n      app.initializeApp(config);\r\n  \r\n      this.auth = app.auth();\r\n      this.db = app.database();\r\n    }\r\n  \r\n    // *** Auth API ***\r\n  \r\n    doCreateUserWithEmailAndPassword = (email, password) =>\r\n      this.auth.createUserWithEmailAndPassword(email, password);\r\n  \r\n    doSignInWithEmailAndPassword = (email, password) =>\r\n      this.auth.signInWithEmailAndPassword(email, password);\r\n  \r\n    doSignOut = () => this.auth.signOut();\r\n  \r\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\r\n  \r\n    doPasswordUpdate = password =>\r\n      this.auth.currentUser.updatePassword(password);\r\n  \r\n    // *** Merge Auth and DB User API *** //\r\n  \r\n    onAuthUserListener = (next, fallback) =>\r\n      this.auth.onAuthStateChanged(authUser => {\r\n        if (authUser) {\r\n          this.user(authUser.uid)\r\n            .once('value')\r\n            .then(snapshot => {\r\n              const dbUser = snapshot.val();\r\n  \r\n              // default empty roles\r\n              if (!dbUser.roles) {\r\n                dbUser.roles = [];\r\n              }\r\n  \r\n              // merge auth and db user\r\n              authUser = {\r\n                uid: authUser.uid,\r\n                email: authUser.email,\r\n                emailVerified: authUser.emailVerified,\r\n                providerData: authUser.providerData,\r\n                ...dbUser,\r\n              };\r\n  \r\n              next(authUser);\r\n            });\r\n        } else {\r\n          fallback();\r\n        }\r\n      });\r\n      doSendEmailVerification=()=>\r\n      this.auth.currentUser.sendEmailVerification({\r\n        url:'http://localhost:3000/home'\r\n      })\r\n  \r\n    // *** User API ***\r\n  \r\n    user = uid => this.db.ref(`users/${uid}`);\r\n  \r\n    users = () => this.db.ref('users');\r\n  }\r\n  \r\n  export default Firebase;"]},"metadata":{},"sourceType":"module"}